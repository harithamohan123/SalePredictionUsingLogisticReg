# -*- coding: utf-8 -*-
"""Ad Sale Predictions Using Logistic Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kdfPERY6Os32rJldB9FDm5OTnvDk6rcA

**Importing libraries.**
"""

import pandas as pd #useful for loading dataset
import numpy as np  #used to perform array

"""**Load Dataset from Local Directory.**"""

from google.colab import files 
uploaded = files.upload()

"""Load Dataset"""

dataset = pd.read_csv('DigitalAd_dataset.csv')

"""Summarize dataset"""

print(dataset.shape)
print(dataset.head(5))

"""Segregate independent variables"""

X = dataset.iloc[:, :-1].values
X

Y = dataset.iloc[:, -1].values
Y

"""split Train and Test"""

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test, = train_test_split(X, Y, test_size=0.25, random_state = 0)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

"""Training"""

from sklearn.linear_model import LogisticRegression
model = LogisticRegression(random_state = 0)
model.fit(X_train, Y_train )

age = int(input("Enter New Customer's Age: "))
salary = int(input("Enter New Customer's Salary: "))
newCust = [[age,salary]]
result = model.predict(sc.transform(newCust))
print(result)
if result == 1:
  print("The Customer will Buy")
else:
  print("The Customer won't Buy")

"""Predict for all Dataset"""

Y_red = model.predict(X_test)
print(np.concatenate((Y_pred.reshape(len(Y_pred),1), Y_test.reshape(len(Y_test),1)),1))

"""Validation by Confusion matrix                                     
(Accuracy = TP+TN / TP+TN+FP+FN)
"""

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(Y_test, Y_pred)

print("Confusion MAtrix: ")
print(cm)

print("Accuracy of the model: {0}%".format(accuracy_score(Y_test, Y_pred)*100))